{"version":3,"sources":["glMatrix.js"],"names":[],"mappings":"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","file":"glMatrix-compiled.js","sourcesContent":["/*\n * glMatrix.js - High performance matrix and vector operations for WebGL\n * version 0.9.6\n * extended/modified by Joshua Newnham Aug 2013\n */\n\n/*\n * Copyright (c) 2011 Brandon Jones\n *\n * This software is provided 'as-is', without any express or implied\n * warranty. In no event will the authors be held liable for any damages\n * arising from the use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it\n * freely, subject to the following restrictions:\n *\n *    1. The origin of this software must not be misrepresented; you must not\n *    claim that you wrote the original software. If you use this software\n *    in a product, an acknowledgment in the product documentation would be\n *    appreciated but is not required.\n *\n *    2. Altered source versions must be plainly marked as such, and must not\n *    be misrepresented as being the original software.\n *\n *    3. This notice may not be removed or altered from any source\n *    distribution.\n */\n\n// Fallback for systems that don't support WebGL\nif(typeof Float32Array != 'undefined') {\n    glMatrixArrayType = Float32Array;\n} else if(typeof WebGLFloatArray != 'undefined') {\n    glMatrixArrayType = WebGLFloatArray; // This is officially deprecated and should dissapear in future revisions.\n} else {\n    glMatrixArrayType = Array;\n}\n\n/*\n * vec3 - 3 Dimensional Vector\n */\nvar vec3 = {};\n\n/*\n * vec3.create\n * Creates a new instance of a vec3 using the default array type\n * Any javascript array containing at least 3 numeric elements can serve as a vec3\n *\n * Params:\n * vec - Optional, vec3 containing values to initialize with\n *\n * Returns:\n * New vec3\n */\nvec3.create = function(vec) {\n    var dest = new glMatrixArrayType(3);\n\n    if(vec) {\n        dest[0] = vec[0];\n        dest[1] = vec[1];\n        dest[2] = vec[2];\n    }\n\n    return dest;\n};\n\n/*\n * vec3.set\n * Copies the values of one vec3 to another\n *\n * Params:\n * vec - vec3 containing values to copy\n * dest - vec3 receiving copied values\n *\n * Returns:\n * dest\n */\nvec3.set = function(vec, dest) {\n    dest[0] = vec[0];\n    dest[1] = vec[1];\n    dest[2] = vec[2];\n\n    return dest;\n};\n\nvec3.setValues = function(vec, x, y, z) {\n    vec[0] = x;\n    vec[1] = y;\n    vec[2] = z;\n\n    return vec;\n};\n\n/*\n * vec3.add\n * Performs a vector addition\n *\n * Params:\n * vec - vec3, first operand\n * vec2 - vec3, second operand\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.add = function(vec, vec2, dest) {\n    if(!dest || vec == dest) {\n        vec[0] += vec2[0];\n        vec[1] += vec2[1];\n        vec[2] += vec2[2];\n        return vec;\n    }\n\n    dest[0] = vec[0] + vec2[0];\n    dest[1] = vec[1] + vec2[1];\n    dest[2] = vec[2] + vec2[2];\n    return dest;\n};\n\n/*\n * vec3.subtract\n * Performs a vector subtraction\n *\n * Params:\n * vec - vec3, first operand\n * vec2 - vec3, second operand\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.subtract = function(vec, vec2, dest) {\n    if(!dest || vec == dest) {\n        vec[0] -= vec2[0];\n        vec[1] -= vec2[1];\n        vec[2] -= vec2[2];\n        return vec;\n    }\n\n    dest[0] = vec[0] - vec2[0];\n    dest[1] = vec[1] - vec2[1];\n    dest[2] = vec[2] - vec2[2];\n    return dest;\n};\n\n/*\n * vec3.negate\n * Negates the components of a vec3\n *\n * Params:\n * vec - vec3 to negate\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.negate = function(vec, dest) {\n    if(!dest) { dest = vec; }\n\n    dest[0] = -vec[0];\n    dest[1] = -vec[1];\n    dest[2] = -vec[2];\n    return dest;\n};\n\n/*\n * vec3.scale\n * Multiplies the components of a vec3 by a scalar value\n *\n * Params:\n * vec - vec3 to scale\n * val - Numeric value to scale by\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.scale = function(vec, val, dest) {\n    if(!dest || vec == dest) {\n        vec[0] *= val;\n        vec[1] *= val;\n        vec[2] *= val;\n        return vec;\n    }\n\n    dest[0] = vec[0]*val;\n    dest[1] = vec[1]*val;\n    dest[2] = vec[2]*val;\n    return dest;\n};\n\n/*\n * vec3.normalize\n * Generates a unit vector of the same direction as the provided vec3\n * If vector length is 0, returns [0, 0, 0]\n *\n * Params:\n * vec - vec3 to normalize\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.normalize = function(vec, dest) {\n    if(!dest) { dest = vec; }\n\n    var x = vec[0], y = vec[1], z = vec[2];\n    var len = Math.sqrt(x*x + y*y + z*z);\n\n    if (!len) {\n        dest[0] = 0;\n        dest[1] = 0;\n        dest[2] = 0;\n        return dest;\n    } else if (len == 1) {\n        dest[0] = x;\n        dest[1] = y;\n        dest[2] = z;\n        return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x*len;\n    dest[1] = y*len;\n    dest[2] = z*len;\n    return dest;\n};\n\n/*\n * vec3.cross\n * Generates the cross product of two vec3s\n *\n * Params:\n * vec - vec3, first operand\n * vec2 - vec3, second operand\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.cross = function(vec, vec2, dest){\n    if(!dest) { dest = vec; }\n\n    var x = vec[0], y = vec[1], z = vec[2];\n    var x2 = vec2[0], y2 = vec2[1], z2 = vec2[2];\n\n    dest[0] = y*z2 - z*y2;\n    dest[1] = z*x2 - x*z2;\n    dest[2] = x*y2 - y*x2;\n    return dest;\n};\n\n/*\n * vec3.length\n * Caclulates the length of a vec3\n *\n * Params:\n * vec - vec3 to calculate length of\n *\n * Returns:\n * Length of vec\n */\nvec3.length = function(vec){\n    var x = vec[0], y = vec[1], z = vec[2];\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/**\n * distance between 2 vectors\n * @param vec\n * @param vec2\n * @returns {number}\n */\nvec3.distance = function(vec, vec2){\n    var x = vec[0] - vec2[0];\n    var y = vec[1] - vec2[1];\n    var z = vec[2] - vec2[2];\n\n    return Math.sqrt(x*x + y*y + z*z);\n};\n\n/*\n * vec3.dot\n * Caclulates the dot product of two vec3s\n *\n * Params:\n * vec - vec3, first operand\n * vec2 - vec3, second operand\n *\n * Returns:\n * Dot product of vec and vec2\n */\nvec3.dot = function(vec, vec2){\n    return vec[0]*vec2[0] + vec[1]*vec2[1] + vec[2]*vec2[2];\n};\n\n/*\n * vec3.direction\n * Generates a unit vector pointing from one vector to another\n *\n * Params:\n * vec - origin vec3\n * vec2 - vec3 to point to\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.direction = function(vec, vec2, dest) {\n    if(!dest) { dest = vec; }\n\n    var x = vec[0] - vec2[0];\n    var y = vec[1] - vec2[1];\n    var z = vec[2] - vec2[2];\n\n    var len = Math.sqrt(x*x + y*y + z*z);\n    if (!len) {\n        dest[0] = 0;\n        dest[1] = 0;\n        dest[2] = 0;\n        return dest;\n    }\n\n    len = 1 / len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    return dest;\n};\n\n/*\n * vec3.lerp\n * Performs a linear interpolation between two vec3\n *\n * Params:\n * vec - vec3, first vector\n * vec2 - vec3, second vector\n * lerp - interpolation amount between the two inputs\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nvec3.lerp = function(vec, vec2, lerp, dest){\n    if(!dest) { dest = vec; }\n\n    dest[0] = vec[0] + lerp * (vec2[0] - vec[0]);\n    dest[1] = vec[1] + lerp * (vec2[1] - vec[1]);\n    dest[2] = vec[2] + lerp * (vec2[2] - vec[2]);\n\n    return dest;\n}\n\n/*\n * vec3.str\n * Returns a string representation of a vector\n *\n * Params:\n * vec - vec3 to represent as a string\n *\n * Returns:\n * string representation of vec\n */\nvec3.str = function(vec) {\n    return '[' + vec[0] + ', ' + vec[1] + ', ' + vec[2] + ']';\n};\n\nvar vec4 = {};\n\n/*\n * vec3.create\n * Creates a new instance of a vec3 using the default array type\n * Any javascript array containing at least 3 numeric elements can serve as a vec3\n *\n * Params:\n * vec - Optional, vec3 containing values to initialize with\n *\n * Returns:\n * New vec3\n */\nvec4.create = function(vec) {\n    var dest = new glMatrixArrayType(4);\n\n    if(vec) {\n        dest[0] = vec[0];\n        dest[1] = vec[1];\n        dest[2] = vec[2];\n        dest[3] = vec[3];\n    }\n\n    return dest;\n};\n\nvec4.setValues = function(vec, x,y,z,w){\n    \"use strict\";\n    vec[0] = x;\n    vec[1] = y;\n    vec[2] = z;\n    vec[3] = w;\n\n    return vec;\n\n}\n\n/*\n * mat3 - 3x3 Matrix\n */\nvar mat3 = {};\n\n/*\n * mat3.create\n * Creates a new instance of a mat3 using the default array type\n * Any javascript array containing at least 9 numeric elements can serve as a mat3\n *\n * Params:\n * mat - Optional, mat3 containing values to initialize with\n *\n * Returns:\n * New mat3\n */\nmat3.create = function(mat) {\n    var dest = new glMatrixArrayType(9);\n\n    if(mat) {\n        dest[0] = mat[0];\n        dest[1] = mat[1];\n        dest[2] = mat[2];\n        dest[3] = mat[3];\n        dest[4] = mat[4];\n        dest[5] = mat[5];\n        dest[6] = mat[6];\n        dest[7] = mat[7];\n        dest[8] = mat[8];\n    }\n\n    return dest;\n};\n\n/*\n * mat3.set\n * Copies the values of one mat3 to another\n *\n * Params:\n * mat - mat3 containing values to copy\n * dest - mat3 receiving copied values\n *\n * Returns:\n * dest\n */\nmat3.set = function(mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    return dest;\n};\n\n/*\n * mat3.identity\n * Sets a mat3 to an identity matrix\n *\n * Params:\n * dest - mat3 to set\n *\n * Returns:\n * dest\n */\nmat3.identity = function(dest) {\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 1;\n    dest[5] = 0;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 1;\n    return dest;\n};\n\n/*\n * mat4.transpose\n * Transposes a mat3 (flips the values over the diagonal)\n *\n * Params:\n * mat - mat3 to transpose\n * dest - Optional, mat3 receiving transposed values. If not specified result is written to mat\n *\n * Returns:\n * dest is specified, mat otherwise\n */\nmat3.transpose = function(mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if(!dest || mat == dest) {\n        var a01 = mat[1], a02 = mat[2];\n        var a12 = mat[5];\n\n        mat[1] = mat[3];\n        mat[2] = mat[6];\n        mat[3] = a01;\n        mat[5] = mat[7];\n        mat[6] = a02;\n        mat[7] = a12;\n        return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[3];\n    dest[2] = mat[6];\n    dest[3] = mat[1];\n    dest[4] = mat[4];\n    dest[5] = mat[7];\n    dest[6] = mat[2];\n    dest[7] = mat[5];\n    dest[8] = mat[8];\n    return dest;\n};\n\n/*\n * mat3.toMat4\n * Copies the elements of a mat3 into the upper 3x3 elements of a mat4\n *\n * Params:\n * mat - mat3 containing values to copy\n * dest - Optional, mat4 receiving copied values\n *\n * Returns:\n * dest if specified, a new mat4 otherwise\n */\nmat3.toMat4 = function(mat, dest) {\n    if(!dest) { dest = mat4.create(); }\n\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = 0;\n\n    dest[4] = mat[3];\n    dest[5] = mat[4];\n    dest[6] = mat[5];\n    dest[7] = 0;\n\n    dest[8] = mat[6];\n    dest[9] = mat[7];\n    dest[10] = mat[8];\n    dest[11] = 0;\n\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n\n    return dest;\n}\n\n/*\n * mat3.str\n * Returns a string representation of a mat3\n *\n * Params:\n * mat - mat3 to represent as a string\n *\n * Returns:\n * string representation of mat\n */\nmat3.str = function(mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] +\n        ', ' + mat[3] + ', '+ mat[4] + ', ' + mat[5] +\n        ', ' + mat[6] + ', ' + mat[7] + ', '+ mat[8] + ']';\n};\n\n/*\n * mat4 - 4x4 Matrix\n */\nvar mat4 = {};\n\n/*\n * mat4.create\n * Creates a new instance of a mat4 using the default array type\n * Any javascript array containing at least 16 numeric elements can serve as a mat4\n *\n * Params:\n * mat - Optional, mat4 containing values to initialize with\n *\n * Returns:\n * New mat4\n */\nmat4.create = function(mat) {\n    var dest = new glMatrixArrayType(16);\n\n    if(mat) {\n        dest[0] = mat[0];\n        dest[1] = mat[1];\n        dest[2] = mat[2];\n        dest[3] = mat[3];\n        dest[4] = mat[4];\n        dest[5] = mat[5];\n        dest[6] = mat[6];\n        dest[7] = mat[7];\n        dest[8] = mat[8];\n        dest[9] = mat[9];\n        dest[10] = mat[10];\n        dest[11] = mat[11];\n        dest[12] = mat[12];\n        dest[13] = mat[13];\n        dest[14] = mat[14];\n        dest[15] = mat[15];\n    }\n\n    return dest;\n};\n\n/*\n * mat4.set\n * Copies the values of one mat4 to another\n *\n * Params:\n * mat - mat4 containing values to copy\n * dest - mat4 receiving copied values\n *\n * Returns:\n * dest\n */\nmat4.set = function(mat, dest) {\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    dest[9] = mat[9];\n    dest[10] = mat[10];\n    dest[11] = mat[11];\n    dest[12] = mat[12];\n    dest[13] = mat[13];\n    dest[14] = mat[14];\n    dest[15] = mat[15];\n    return dest;\n};\n\n/*\n * mat4.identity\n * Sets a mat4 to an identity matrix\n *\n * Params:\n * dest - mat4 to set\n *\n * Returns:\n * dest\n */\nmat4.identity = function(dest) {\n    dest[0] = 1;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = 1;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 0;\n    dest[9] = 0;\n    dest[10] = 1;\n    dest[11] = 0;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n    return dest;\n};\n\n/*\n * mat4.transpose\n * Transposes a mat4 (flips the values over the diagonal)\n *\n * Params:\n * mat - mat4 to transpose\n * dest - Optional, mat4 receiving transposed values. If not specified result is written to mat\n *\n * Returns:\n * dest is specified, mat otherwise\n */\nmat4.transpose = function(mat, dest) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if(!dest || mat == dest) {\n        var a01 = mat[1], a02 = mat[2], a03 = mat[3];\n        var a12 = mat[6], a13 = mat[7];\n        var a23 = mat[11];\n\n        mat[1] = mat[4];\n        mat[2] = mat[8];\n        mat[3] = mat[12];\n        mat[4] = a01;\n        mat[6] = mat[9];\n        mat[7] = mat[13];\n        mat[8] = a02;\n        mat[9] = a12;\n        mat[11] = mat[14];\n        mat[12] = a03;\n        mat[13] = a13;\n        mat[14] = a23;\n        return mat;\n    }\n\n    dest[0] = mat[0];\n    dest[1] = mat[4];\n    dest[2] = mat[8];\n    dest[3] = mat[12];\n    dest[4] = mat[1];\n    dest[5] = mat[5];\n    dest[6] = mat[9];\n    dest[7] = mat[13];\n    dest[8] = mat[2];\n    dest[9] = mat[6];\n    dest[10] = mat[10];\n    dest[11] = mat[14];\n    dest[12] = mat[3];\n    dest[13] = mat[7];\n    dest[14] = mat[11];\n    dest[15] = mat[15];\n    return dest;\n};\n\n/*\n * mat4.determinant\n * Calculates the determinant of a mat4\n *\n * Params:\n * mat - mat4 to calculate determinant of\n *\n * Returns:\n * determinant of mat\n */\nmat4.determinant = function(mat) {\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\n    var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];\n\n    return  a30*a21*a12*a03 - a20*a31*a12*a03 - a30*a11*a22*a03 + a10*a31*a22*a03 +\n        a20*a11*a32*a03 - a10*a21*a32*a03 - a30*a21*a02*a13 + a20*a31*a02*a13 +\n        a30*a01*a22*a13 - a00*a31*a22*a13 - a20*a01*a32*a13 + a00*a21*a32*a13 +\n        a30*a11*a02*a23 - a10*a31*a02*a23 - a30*a01*a12*a23 + a00*a31*a12*a23 +\n        a10*a01*a32*a23 - a00*a11*a32*a23 - a20*a11*a02*a33 + a10*a21*a02*a33 +\n        a20*a01*a12*a33 - a00*a21*a12*a33 - a10*a01*a22*a33 + a00*a11*a22*a33;\n};\n\n/*\n * mat4.inverse\n * Calculates the inverse matrix of a mat4\n *\n * Params:\n * mat - mat4 to calculate inverse of\n * dest - Optional, mat4 receiving inverse matrix. If not specified result is written to mat\n *\n * Returns:\n * dest is specified, mat otherwise\n */\nmat4.inverse = function(mat, dest) {\n    if(!dest) { dest = mat; }\n\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\n    var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];\n\n    var b00 = a00*a11 - a01*a10;\n    var b01 = a00*a12 - a02*a10;\n    var b02 = a00*a13 - a03*a10;\n    var b03 = a01*a12 - a02*a11;\n    var b04 = a01*a13 - a03*a11;\n    var b05 = a02*a13 - a03*a12;\n    var b06 = a20*a31 - a21*a30;\n    var b07 = a20*a32 - a22*a30;\n    var b08 = a20*a33 - a23*a30;\n    var b09 = a21*a32 - a22*a31;\n    var b10 = a21*a33 - a23*a31;\n    var b11 = a22*a33 - a23*a32;\n\n    // Calculate the determinant (inlined to avoid double-caching)\n    var invDet = 1/(b00*b11 - b01*b10 + b02*b09 + b03*b08 - b04*b07 + b05*b06);\n\n    dest[0] = (a11*b11 - a12*b10 + a13*b09)*invDet;\n    dest[1] = (-a01*b11 + a02*b10 - a03*b09)*invDet;\n    dest[2] = (a31*b05 - a32*b04 + a33*b03)*invDet;\n    dest[3] = (-a21*b05 + a22*b04 - a23*b03)*invDet;\n    dest[4] = (-a10*b11 + a12*b08 - a13*b07)*invDet;\n    dest[5] = (a00*b11 - a02*b08 + a03*b07)*invDet;\n    dest[6] = (-a30*b05 + a32*b02 - a33*b01)*invDet;\n    dest[7] = (a20*b05 - a22*b02 + a23*b01)*invDet;\n    dest[8] = (a10*b10 - a11*b08 + a13*b06)*invDet;\n    dest[9] = (-a00*b10 + a01*b08 - a03*b06)*invDet;\n    dest[10] = (a30*b04 - a31*b02 + a33*b00)*invDet;\n    dest[11] = (-a20*b04 + a21*b02 - a23*b00)*invDet;\n    dest[12] = (-a10*b09 + a11*b07 - a12*b06)*invDet;\n    dest[13] = (a00*b09 - a01*b07 + a02*b06)*invDet;\n    dest[14] = (-a30*b03 + a31*b01 - a32*b00)*invDet;\n    dest[15] = (a20*b03 - a21*b01 + a22*b00)*invDet;\n\n    return dest;\n};\n\n/*\n * mat4.toRotationMat\n * Copies the upper 3x3 elements of a mat4 into another mat4\n *\n * Params:\n * mat - mat4 containing values to copy\n * dest - Optional, mat4 receiving copied values\n *\n * Returns:\n * dest is specified, a new mat4 otherwise\n */\nmat4.toRotationMat = function(mat, dest) {\n    if(!dest) { dest = mat4.create(); }\n\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[3];\n    dest[4] = mat[4];\n    dest[5] = mat[5];\n    dest[6] = mat[6];\n    dest[7] = mat[7];\n    dest[8] = mat[8];\n    dest[9] = mat[9];\n    dest[10] = mat[10];\n    dest[11] = mat[11];\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n\n    return dest;\n};\n\n/*\n * mat4.toMat3\n * Copies the upper 3x3 elements of a mat4 into a mat3\n *\n * Params:\n * mat - mat4 containing values to copy\n * dest - Optional, mat3 receiving copied values\n *\n * Returns:\n * dest is specified, a new mat3 otherwise\n */\nmat4.toMat3 = function(mat, dest) {\n    if(!dest) { dest = mat3.create(); }\n\n    dest[0] = mat[0];\n    dest[1] = mat[1];\n    dest[2] = mat[2];\n    dest[3] = mat[4];\n    dest[4] = mat[5];\n    dest[5] = mat[6];\n    dest[6] = mat[8];\n    dest[7] = mat[9];\n    dest[8] = mat[10];\n\n    return dest;\n};\n\n/*\n * mat4.toInverseMat3\n * Calculates the inverse of the upper 3x3 elements of a mat4 and copies the result into a mat3\n * The resulting matrix is useful for calculating transformed normals\n *\n * Params:\n * mat - mat4 containing values to invert and copy\n * dest - Optional, mat3 receiving values\n *\n * Returns:\n * dest is specified, a new mat3 otherwise\n */\nmat4.toInverseMat3 = function(mat, dest) {\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2];\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10];\n\n    var b01 = a22*a11-a12*a21;\n    var b11 = -a22*a10+a12*a20;\n    var b21 = a21*a10-a11*a20;\n\n    var d = a00*b01 + a01*b11 + a02*b21;\n    if (!d) { return null; }\n    var id = 1/d;\n\n    if(!dest) { dest = mat3.create(); }\n\n    dest[0] = b01*id;\n    dest[1] = (-a22*a01 + a02*a21)*id;\n    dest[2] = (a12*a01 - a02*a11)*id;\n    dest[3] = b11*id;\n    dest[4] = (a22*a00 - a02*a20)*id;\n    dest[5] = (-a12*a00 + a02*a10)*id;\n    dest[6] = b21*id;\n    dest[7] = (-a21*a00 + a01*a20)*id;\n    dest[8] = (a11*a00 - a01*a10)*id;\n\n    return dest;\n};\n\n/*\n * mat4.multiply\n * Performs a matrix multiplication\n *\n * Params:\n * mat - mat4, first operand\n * mat2 - mat4, second operand\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\n *\n * Returns:\n * dest if specified, mat otherwise\n */\nmat4.multiply = function(mat, mat2, dest) {\n    if(!dest) { dest = mat }\n\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\n    var a30 = mat[12], a31 = mat[13], a32 = mat[14], a33 = mat[15];\n\n    var b00 = mat2[0], b01 = mat2[1], b02 = mat2[2], b03 = mat2[3];\n    var b10 = mat2[4], b11 = mat2[5], b12 = mat2[6], b13 = mat2[7];\n    var b20 = mat2[8], b21 = mat2[9], b22 = mat2[10], b23 = mat2[11];\n    var b30 = mat2[12], b31 = mat2[13], b32 = mat2[14], b33 = mat2[15];\n\n    dest[0] = b00*a00 + b01*a10 + b02*a20 + b03*a30;\n    dest[1] = b00*a01 + b01*a11 + b02*a21 + b03*a31;\n    dest[2] = b00*a02 + b01*a12 + b02*a22 + b03*a32;\n    dest[3] = b00*a03 + b01*a13 + b02*a23 + b03*a33;\n    dest[4] = b10*a00 + b11*a10 + b12*a20 + b13*a30;\n    dest[5] = b10*a01 + b11*a11 + b12*a21 + b13*a31;\n    dest[6] = b10*a02 + b11*a12 + b12*a22 + b13*a32;\n    dest[7] = b10*a03 + b11*a13 + b12*a23 + b13*a33;\n    dest[8] = b20*a00 + b21*a10 + b22*a20 + b23*a30;\n    dest[9] = b20*a01 + b21*a11 + b22*a21 + b23*a31;\n    dest[10] = b20*a02 + b21*a12 + b22*a22 + b23*a32;\n    dest[11] = b20*a03 + b21*a13 + b22*a23 + b23*a33;\n    dest[12] = b30*a00 + b31*a10 + b32*a20 + b33*a30;\n    dest[13] = b30*a01 + b31*a11 + b32*a21 + b33*a31;\n    dest[14] = b30*a02 + b31*a12 + b32*a22 + b33*a32;\n    dest[15] = b30*a03 + b31*a13 + b32*a23 + b33*a33;\n\n    return dest;\n};\n\n/*\n * mat4.multiplyVec3\n * Transforms a vec3 with the given matrix\n * 4th vector component is implicitly '1'\n *\n * Params:\n * mat - mat4 to transform the vector with\n * vec - vec3 to transform\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nmat4.multiplyVec3 = function(mat, vec, dest) {\n    if(!dest) { dest = vec }\n\n    var x = vec[0], y = vec[1], z = vec[2];\n\n    dest[0] = mat[0]*x + mat[4]*y + mat[8]*z + mat[12];\n    dest[1] = mat[1]*x + mat[5]*y + mat[9]*z + mat[13];\n    dest[2] = mat[2]*x + mat[6]*y + mat[10]*z + mat[14];\n\n    return dest;\n};\n\n/*\n * mat4.multiplyVec4\n * Transforms a vec4 with the given matrix\n *\n * Params:\n * mat - mat4 to transform the vector with\n * vec - vec4 to transform\n * dest - Optional, vec4 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nmat4.multiplyVec4 = function(mat, vec, dest) {\n    if(!dest) { dest = vec }\n\n    var x = vec[0], y = vec[1], z = vec[2], w = vec[3];\n\n    dest[0] = mat[0]*x + mat[4]*y + mat[8]*z + mat[12]*w;\n    dest[1] = mat[1]*x + mat[5]*y + mat[9]*z + mat[13]*w;\n    dest[2] = mat[2]*x + mat[6]*y + mat[10]*z + mat[14]*w;\n    dest[3] = mat[3]*x + mat[7]*y + mat[11]*z + mat[15]*w;\n\n    return dest;\n};\n\n/*\n * mat4.translate\n * Translates a matrix by the given vector\n *\n * Params:\n * mat - mat4 to translate\n * vec - vec3 specifying the translation\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\n *\n * Returns:\n * dest if specified, mat otherwise\n */\nmat4.translate = function(mat, vec, dest) {\n    var x = vec[0], y = vec[1], z = vec[2];\n\n    if(!dest || mat == dest) {\n        mat[12] = mat[0]*x + mat[4]*y + mat[8]*z + mat[12];\n        mat[13] = mat[1]*x + mat[5]*y + mat[9]*z + mat[13];\n        mat[14] = mat[2]*x + mat[6]*y + mat[10]*z + mat[14];\n        mat[15] = mat[3]*x + mat[7]*y + mat[11]*z + mat[15];\n        return mat;\n    }\n\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\n\n    dest[0] = a00;\n    dest[1] = a01;\n    dest[2] = a02;\n    dest[3] = a03;\n    dest[4] = a10;\n    dest[5] = a11;\n    dest[6] = a12;\n    dest[7] = a13;\n    dest[8] = a20;\n    dest[9] = a21;\n    dest[10] = a22;\n    dest[11] = a23;\n\n    dest[12] = a00*x + a10*y + a20*z + mat[12];\n    dest[13] = a01*x + a11*y + a21*z + mat[13];\n    dest[14] = a02*x + a12*y + a22*z + mat[14];\n    dest[15] = a03*x + a13*y + a23*z + mat[15];\n    return dest;\n};\n\n/*\n * mat4.scale\n * Scales a matrix by the given vector\n *\n * Params:\n * mat - mat4 to scale\n * vec - vec3 specifying the scale for each axis\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\n *\n * Returns:\n * dest if specified, mat otherwise\n */\nmat4.scale = function(mat, vec, dest) {\n    var x = vec[0], y = vec[1], z = vec[2];\n\n    if(!dest || mat == dest) {\n        mat[0] *= x;\n        mat[1] *= x;\n        mat[2] *= x;\n        mat[3] *= x;\n        mat[4] *= y;\n        mat[5] *= y;\n        mat[6] *= y;\n        mat[7] *= y;\n        mat[8] *= z;\n        mat[9] *= z;\n        mat[10] *= z;\n        mat[11] *= z;\n        return mat;\n    }\n\n    dest[0] = mat[0]*x;\n    dest[1] = mat[1]*x;\n    dest[2] = mat[2]*x;\n    dest[3] = mat[3]*x;\n    dest[4] = mat[4]*y;\n    dest[5] = mat[5]*y;\n    dest[6] = mat[6]*y;\n    dest[7] = mat[7]*y;\n    dest[8] = mat[8]*z;\n    dest[9] = mat[9]*z;\n    dest[10] = mat[10]*z;\n    dest[11] = mat[11]*z;\n    dest[12] = mat[12];\n    dest[13] = mat[13];\n    dest[14] = mat[14];\n    dest[15] = mat[15];\n    return dest;\n};\n\n/*\n * mat4.rotate\n * Rotates a matrix by the given angle around the specified axis\n * If rotating around a primary axis (X,Y,Z) one of the specialized rotation functions should be used instead for performance\n *\n * Params:\n * mat - mat4 to rotate\n * angle - angle (in radians) to rotate\n * axis - vec3 representing the axis to rotate around\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\n *\n * Returns:\n * dest if specified, mat otherwise\n */\nmat4.rotate = function(mat, angle, axis, dest) {\n    var x = axis[0], y = axis[1], z = axis[2];\n    var len = Math.sqrt(x*x + y*y + z*z);\n    if (!len) { return null; }\n    if (len != 1) {\n        len = 1 / len;\n        x *= len;\n        y *= len;\n        z *= len;\n    }\n\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n    var t = 1-c;\n\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\n\n    // Construct the elements of the rotation matrix\n    var b00 = x*x*t + c, b01 = y*x*t + z*s, b02 = z*x*t - y*s;\n    var b10 = x*y*t - z*s, b11 = y*y*t + c, b12 = z*y*t + x*s;\n    var b20 = x*z*t + y*s, b21 = y*z*t - x*s, b22 = z*z*t + c;\n\n    if(!dest) {\n        dest = mat\n    } else if(mat != dest) { // If the source and destination differ, copy the unchanged last row\n        dest[12] = mat[12];\n        dest[13] = mat[13];\n        dest[14] = mat[14];\n        dest[15] = mat[15];\n    }\n\n    // Perform rotation-specific matrix multiplication\n    dest[0] = a00*b00 + a10*b01 + a20*b02;\n    dest[1] = a01*b00 + a11*b01 + a21*b02;\n    dest[2] = a02*b00 + a12*b01 + a22*b02;\n    dest[3] = a03*b00 + a13*b01 + a23*b02;\n\n    dest[4] = a00*b10 + a10*b11 + a20*b12;\n    dest[5] = a01*b10 + a11*b11 + a21*b12;\n    dest[6] = a02*b10 + a12*b11 + a22*b12;\n    dest[7] = a03*b10 + a13*b11 + a23*b12;\n\n    dest[8] = a00*b20 + a10*b21 + a20*b22;\n    dest[9] = a01*b20 + a11*b21 + a21*b22;\n    dest[10] = a02*b20 + a12*b21 + a22*b22;\n    dest[11] = a03*b20 + a13*b21 + a23*b22;\n    return dest;\n};\n\n/*\n * mat4.rotateX\n * Rotates a matrix by the given angle around the X axis\n *\n * Params:\n * mat - mat4 to rotate\n * angle - angle (in radians) to rotate\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\n *\n * Returns:\n * dest if specified, mat otherwise\n */\nmat4.rotateX = function(mat, angle, dest) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n\n    // Cache the matrix values (makes for huge speed increases!)\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\n\n    if(!dest) {\n        dest = mat\n    } else if(mat != dest) { // If the source and destination differ, copy the unchanged rows\n        dest[0] = mat[0];\n        dest[1] = mat[1];\n        dest[2] = mat[2];\n        dest[3] = mat[3];\n\n        dest[12] = mat[12];\n        dest[13] = mat[13];\n        dest[14] = mat[14];\n        dest[15] = mat[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    dest[4] = a10*c + a20*s;\n    dest[5] = a11*c + a21*s;\n    dest[6] = a12*c + a22*s;\n    dest[7] = a13*c + a23*s;\n\n    dest[8] = a10*-s + a20*c;\n    dest[9] = a11*-s + a21*c;\n    dest[10] = a12*-s + a22*c;\n    dest[11] = a13*-s + a23*c;\n    return dest;\n};\n\n/*\n * mat4.rotateY\n * Rotates a matrix by the given angle around the Y axis\n *\n * Params:\n * mat - mat4 to rotate\n * angle - angle (in radians) to rotate\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\n *\n * Returns:\n * dest if specified, mat otherwise\n */\nmat4.rotateY = function(mat, angle, dest) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\n    var a20 = mat[8], a21 = mat[9], a22 = mat[10], a23 = mat[11];\n\n    if(!dest) {\n        dest = mat\n    } else if(mat != dest) { // If the source and destination differ, copy the unchanged rows\n        dest[4] = mat[4];\n        dest[5] = mat[5];\n        dest[6] = mat[6];\n        dest[7] = mat[7];\n\n        dest[12] = mat[12];\n        dest[13] = mat[13];\n        dest[14] = mat[14];\n        dest[15] = mat[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    dest[0] = a00*c + a20*-s;\n    dest[1] = a01*c + a21*-s;\n    dest[2] = a02*c + a22*-s;\n    dest[3] = a03*c + a23*-s;\n\n    dest[8] = a00*s + a20*c;\n    dest[9] = a01*s + a21*c;\n    dest[10] = a02*s + a22*c;\n    dest[11] = a03*s + a23*c;\n    return dest;\n};\n\n/*\n * mat4.rotateZ\n * Rotates a matrix by the given angle around the Z axis\n *\n * Params:\n * mat - mat4 to rotate\n * angle - angle (in radians) to rotate\n * dest - Optional, mat4 receiving operation result. If not specified result is written to mat\n *\n * Returns:\n * dest if specified, mat otherwise\n */\nmat4.rotateZ = function(mat, angle, dest) {\n    var s = Math.sin(angle);\n    var c = Math.cos(angle);\n\n    // Cache the matrix values (makes for huge speed increases!)\n    var a00 = mat[0], a01 = mat[1], a02 = mat[2], a03 = mat[3];\n    var a10 = mat[4], a11 = mat[5], a12 = mat[6], a13 = mat[7];\n\n    if(!dest) {\n        dest = mat\n    } else if(mat != dest) { // If the source and destination differ, copy the unchanged last row\n        dest[8] = mat[8];\n        dest[9] = mat[9];\n        dest[10] = mat[10];\n        dest[11] = mat[11];\n\n        dest[12] = mat[12];\n        dest[13] = mat[13];\n        dest[14] = mat[14];\n        dest[15] = mat[15];\n    }\n\n    // Perform axis-specific matrix multiplication\n    dest[0] = a00*c + a10*s;\n    dest[1] = a01*c + a11*s;\n    dest[2] = a02*c + a12*s;\n    dest[3] = a03*c + a13*s;\n\n    dest[4] = a00*-s + a10*c;\n    dest[5] = a01*-s + a11*c;\n    dest[6] = a02*-s + a12*c;\n    dest[7] = a03*-s + a13*c;\n\n    return dest;\n};\n\n/*\n * mat4.frustum\n * Generates a frustum matrix with the given bounds\n *\n * Params:\n * left, right - scalar, left and right bounds of the frustum\n * bottom, top - scalar, bottom and top bounds of the frustum\n * near, far - scalar, near and far bounds of the frustum\n * dest - Optional, mat4 frustum matrix will be written into\n *\n * Returns:\n * dest if specified, a new mat4 otherwise\n */\nmat4.frustum = function(left, right, bottom, top, near, far, dest) {\n    if(!dest) { dest = mat4.create(); }\n    var rl = (right - left);\n    var tb = (top - bottom);\n    var fn = (far - near);\n    dest[0] = (near*2) / rl;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = (near*2) / tb;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = (right + left) / rl;\n    dest[9] = (top + bottom) / tb;\n    dest[10] = -(far + near) / fn;\n    dest[11] = -1;\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = -(far*near*2) / fn;\n    dest[15] = 0;\n    return dest;\n};\n\n/*\n * mat4.perspective\n * Generates a perspective projection matrix with the given bounds\n *\n * Params:\n * fovy - scalar, vertical field of view\n * aspect - scalar, aspect ratio. typically viewport width/height\n * near, far - scalar, near and far bounds of the frustum\n * dest - Optional, mat4 frustum matrix will be written into\n *\n * Returns:\n * dest if specified, a new mat4 otherwise\n */\nmat4.perspective = function(fovy, aspect, near, far, dest) {\n    var top = near*Math.tan(fovy*Math.PI / 360.0);\n    var right = top*aspect;\n    return mat4.frustum(-right, right, -top, top, near, far, dest);\n};\n\n/*\n * mat4.ortho\n * Generates a orthogonal projection matrix with the given bounds\n *\n * Params:\n * left, right - scalar, left and right bounds of the frustum\n * bottom, top - scalar, bottom and top bounds of the frustum\n * near, far - scalar, near and far bounds of the frustum\n * dest - Optional, mat4 frustum matrix will be written into\n *\n * Returns:\n * dest if specified, a new mat4 otherwise\n */\nmat4.ortho = function(left, right, bottom, top, near, far, dest) {\n    if(!dest) { dest = mat4.create(); }\n    var rl = (right - left);\n    var tb = (top - bottom);\n    var fn = (far - near);\n    dest[0] = 2 / rl;\n    dest[1] = 0;\n    dest[2] = 0;\n    dest[3] = 0;\n    dest[4] = 0;\n    dest[5] = 2 / tb;\n    dest[6] = 0;\n    dest[7] = 0;\n    dest[8] = 0;\n    dest[9] = 0;\n    dest[10] = -2 / fn;\n    dest[11] = 0;\n    dest[12] = -(left + right) / rl;\n    dest[13] = -(top + bottom) / tb;\n    dest[14] = -(far + near) / fn;\n    dest[15] = 1;\n    return dest;\n};\n\n/*\n * mat4.ortho\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * Params:\n * eye - vec3, position of the viewer\n * center - vec3, point the viewer is looking at\n * up - vec3 pointing \"up\"\n * dest - Optional, mat4 frustum matrix will be written into\n *\n * Returns:\n * dest if specified, a new mat4 otherwise\n */\nmat4.lookAt = function(eye, center, up, dest) {\n    if(!dest) { dest = mat4.create(); }\n\n    var eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2],\n        centerx = center[0],\n        centery = center[1],\n        centerz = center[2];\n\n    if (eyex == centerx && eyey == centery && eyez == centerz) {\n        return mat4.identity(dest);\n    }\n\n    var z0,z1,z2,x0,x1,x2,y0,y1,y2,len;\n\n    //vec3.direction(eye, center, z);\n    z0 = eyex - center[0];\n    z1 = eyey - center[1];\n    z2 = eyez - center[2];\n\n    // normalize (no check needed for 0 because of early return)\n    len = 1/Math.sqrt(z0*z0 + z1*z1 + z2*z2);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n\n    //vec3.normalize(vec3.cross(up, z, x));\n    x0 = upy*z2 - upz*z1;\n    x1 = upz*z0 - upx*z2;\n    x2 = upx*z1 - upy*z0;\n    len = Math.sqrt(x0*x0 + x1*x1 + x2*x2);\n    if (!len) {\n        x0 = 0;\n        x1 = 0;\n        x2 = 0;\n    } else {\n        len = 1/len;\n        x0 *= len;\n        x1 *= len;\n        x2 *= len;\n    };\n\n    //vec3.normalize(vec3.cross(z, x, y));\n    y0 = z1*x2 - z2*x1;\n    y1 = z2*x0 - z0*x2;\n    y2 = z0*x1 - z1*x0;\n\n    len = Math.sqrt(y0*y0 + y1*y1 + y2*y2);\n    if (!len) {\n        y0 = 0;\n        y1 = 0;\n        y2 = 0;\n    } else {\n        len = 1/len;\n        y0 *= len;\n        y1 *= len;\n        y2 *= len;\n    }\n\n    dest[0] = x0;\n    dest[1] = y0;\n    dest[2] = z0;\n    dest[3] = 0;\n    dest[4] = x1;\n    dest[5] = y1;\n    dest[6] = z1;\n    dest[7] = 0;\n    dest[8] = x2;\n    dest[9] = y2;\n    dest[10] = z2;\n    dest[11] = 0;\n    dest[12] = -(x0*eyex + x1*eyey + x2*eyez);\n    dest[13] = -(y0*eyex + y1*eyey + y2*eyez);\n    dest[14] = -(z0*eyex + z1*eyey + z2*eyez);\n    dest[15] = 1;\n\n    return dest;\n};\n\n/*\n * mat4.str\n * Returns a string representation of a mat4\n *\n * Params:\n * mat - mat4 to represent as a string\n *\n * Returns:\n * string representation of mat\n */\nmat4.str = function(mat) {\n    return '[' + mat[0] + ', ' + mat[1] + ', ' + mat[2] + ', ' + mat[3] +\n        ', '+ mat[4] + ', ' + mat[5] + ', ' + mat[6] + ', ' + mat[7] +\n        ', '+ mat[8] + ', ' + mat[9] + ', ' + mat[10] + ', ' + mat[11] +\n        ', '+ mat[12] + ', ' + mat[13] + ', ' + mat[14] + ', ' + mat[15] + ']';\n};\n\n/*\n * quat4 - Quaternions\n */\nquat4 = {};\n\n/*\n * quat4.create\n * Creates a new instance of a quat4 using the default array type\n * Any javascript array containing at least 4 numeric elements can serve as a quat4\n *\n * Params:\n * quat - Optional, quat4 containing values to initialize with\n *\n * Returns:\n * New quat4\n */\nquat4.create = function(quat) {\n    var dest = new glMatrixArrayType(4);\n\n    if(quat) {\n        dest[0] = quat[0];\n        dest[1] = quat[1];\n        dest[2] = quat[2];\n        dest[3] = quat[3];\n    }\n\n    return dest;\n};\n\n/*\n * quat4.set\n * Copies the values of one quat4 to another\n *\n * Params:\n * quat - quat4 containing values to copy\n * dest - quat4 receiving copied values\n *\n * Returns:\n * dest\n */\nquat4.set = function(quat, dest) {\n    dest[0] = quat[0];\n    dest[1] = quat[1];\n    dest[2] = quat[2];\n    dest[3] = quat[3];\n\n    return dest;\n};\n\n/*\n * quat4.calculateW\n * Calculates the W component of a quat4 from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * Params:\n * quat - quat4 to calculate W component of\n * dest - Optional, quat4 receiving calculated values. If not specified result is written to quat\n *\n * Returns:\n * dest if specified, quat otherwise\n */\nquat4.calculateW = function(quat, dest) {\n    var x = quat[0], y = quat[1], z = quat[2];\n\n    if(!dest || quat == dest) {\n        quat[3] = -Math.sqrt(Math.abs(1.0 - x*x - y*y - z*z));\n        return quat;\n    }\n    dest[0] = x;\n    dest[1] = y;\n    dest[2] = z;\n    dest[3] = -Math.sqrt(Math.abs(1.0 - x*x - y*y - z*z));\n    return dest;\n}\n\n/*\n * quat4.inverse\n * Calculates the inverse of a quat4\n *\n * Params:\n * quat - quat4 to calculate inverse of\n * dest - Optional, quat4 receiving inverse values. If not specified result is written to quat\n *\n * Returns:\n * dest if specified, quat otherwise\n */\nquat4.inverse = function(quat, dest) {\n    if(!dest || quat == dest) {\n        quat[0] *= -1;\n        quat[1] *= -1;\n        quat[2] *= -1;\n        return quat;\n    }\n    dest[0] = -quat[0];\n    dest[1] = -quat[1];\n    dest[2] = -quat[2];\n    dest[3] = quat[3];\n    return dest;\n}\n\n/*\n * quat4.length\n * Calculates the length of a quat4\n *\n * Params:\n * quat - quat4 to calculate length of\n *\n * Returns:\n * Length of quat\n */\nquat4.length = function(quat) {\n    var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\n    return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/*\n * quat4.normalize\n * Generates a unit quaternion of the same direction as the provided quat4\n * If quaternion length is 0, returns [0, 0, 0, 0]\n *\n * Params:\n * quat - quat4 to normalize\n * dest - Optional, quat4 receiving operation result. If not specified result is written to quat\n *\n * Returns:\n * dest if specified, quat otherwise\n */\nquat4.normalize = function(quat, dest) {\n    if(!dest) { dest = quat; }\n\n    var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\n    var len = Math.sqrt(x*x + y*y + z*z + w*w);\n    if(len == 0) {\n        dest[0] = 0;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 0;\n        return dest;\n    }\n    len = 1/len;\n    dest[0] = x * len;\n    dest[1] = y * len;\n    dest[2] = z * len;\n    dest[3] = w * len;\n\n    return dest;\n}\n\n/*\n * quat4.multiply\n * Performs a quaternion multiplication\n *\n * Params:\n * quat - quat4, first operand\n * quat2 - quat4, second operand\n * dest - Optional, quat4 receiving operation result. If not specified result is written to quat\n *\n * Returns:\n * dest if specified, quat otherwise\n */\nquat4.multiply = function(quat, quat2, dest) {\n    if(!dest) { dest = quat; }\n\n    var qax = quat[0], qay = quat[1], qaz = quat[2], qaw = quat[3];\n    var qbx = quat2[0], qby = quat2[1], qbz = quat2[2], qbw = quat2[3];\n\n    dest[0] = qax*qbw + qaw*qbx + qay*qbz - qaz*qby;\n    dest[1] = qay*qbw + qaw*qby + qaz*qbx - qax*qbz;\n    dest[2] = qaz*qbw + qaw*qbz + qax*qby - qay*qbx;\n    dest[3] = qaw*qbw - qax*qbx - qay*qby - qaz*qbz;\n\n    return dest;\n}\n\n/*\n * quat4.multiplyVec3\n * Transforms a vec3 with the given quaternion\n *\n * Params:\n * quat - quat4 to transform the vector with\n * vec - vec3 to transform\n * dest - Optional, vec3 receiving operation result. If not specified result is written to vec\n *\n * Returns:\n * dest if specified, vec otherwise\n */\nquat4.multiplyVec3 = function(quat, vec, dest) {\n    if(!dest) { dest = vec; }\n\n    var x = vec[0], y = vec[1], z = vec[2];\n    var qx = quat[0], qy = quat[1], qz = quat[2], qw = quat[3];\n\n    // calculate quat * vec\n    var ix = qw*x + qy*z - qz*y;\n    var iy = qw*y + qz*x - qx*z;\n    var iz = qw*z + qx*y - qy*x;\n    var iw = -qx*x - qy*y - qz*z;\n\n    // calculate result * inverse quat\n    dest[0] = ix*qw + iw*-qx + iy*-qz - iz*-qy;\n    dest[1] = iy*qw + iw*-qy + iz*-qx - ix*-qz;\n    dest[2] = iz*qw + iw*-qz + ix*-qy - iy*-qx;\n\n    return dest;\n}\n\n/*\n * quat4.toMat3\n * Calculates a 3x3 matrix from the given quat4\n *\n * Params:\n * quat - quat4 to create matrix from\n * dest - Optional, mat3 receiving operation result\n *\n * Returns:\n * dest if specified, a new mat3 otherwise\n */\nquat4.toMat3 = function(quat, dest) {\n    if(!dest) { dest = mat3.create(); }\n\n    var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\n\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n\n    var xx = x*x2;\n    var xy = x*y2;\n    var xz = x*z2;\n\n    var yy = y*y2;\n    var yz = y*z2;\n    var zz = z*z2;\n\n    var wx = w*x2;\n    var wy = w*y2;\n    var wz = w*z2;\n\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy - wz;\n    dest[2] = xz + wy;\n\n    dest[3] = xy + wz;\n    dest[4] = 1 - (xx + zz);\n    dest[5] = yz - wx;\n\n    dest[6] = xz - wy;\n    dest[7] = yz + wx;\n    dest[8] = 1 - (xx + yy);\n\n    return dest;\n}\n\n/*\n * quat4.toMat4\n * Calculates a 4x4 matrix from the given quat4\n *\n * Params:\n * quat - quat4 to create matrix from\n * dest - Optional, mat4 receiving operation result\n *\n * Returns:\n * dest if specified, a new mat4 otherwise\n */\nquat4.toMat4 = function(quat, dest) {\n    if(!dest) { dest = mat4.create(); }\n\n    var x = quat[0], y = quat[1], z = quat[2], w = quat[3];\n\n    var x2 = x + x;\n    var y2 = y + y;\n    var z2 = z + z;\n\n    var xx = x*x2;\n    var xy = x*y2;\n    var xz = x*z2;\n\n    var yy = y*y2;\n    var yz = y*z2;\n    var zz = z*z2;\n\n    var wx = w*x2;\n    var wy = w*y2;\n    var wz = w*z2;\n\n    dest[0] = 1 - (yy + zz);\n    dest[1] = xy - wz;\n    dest[2] = xz + wy;\n    dest[3] = 0;\n\n    dest[4] = xy + wz;\n    dest[5] = 1 - (xx + zz);\n    dest[6] = yz - wx;\n    dest[7] = 0;\n\n    dest[8] = xz - wy;\n    dest[9] = yz + wx;\n    dest[10] = 1 - (xx + yy);\n    dest[11] = 0;\n\n    dest[12] = 0;\n    dest[13] = 0;\n    dest[14] = 0;\n    dest[15] = 1;\n\n    return dest;\n}\n\n/*\n * quat4.slerp\n * Performs a spherical linear interpolation between two quat4\n *\n * Params:\n * quat - quat4, first quaternion\n * quat2 - quat4, second quaternion\n * slerp - interpolation amount between the two inputs\n * dest - Optional, quat4 receiving operation result. If not specified result is written to quat\n *\n * Returns:\n * dest if specified, quat otherwise\n */\nquat4.slerp = function(quat, quat2, slerp, dest) {\n    if(!dest) { dest = quat; }\n\n    var cosHalfTheta =  quat[0]*quat2[0] + quat[1]*quat2[1] + quat[2]*quat2[2] + quat[3]*quat2[3];\n\n    if (Math.abs(cosHalfTheta) >= 1.0){\n        if(dest != quat) {\n            dest[0] = quat[0];\n            dest[1] = quat[1];\n            dest[2] = quat[2];\n            dest[3] = quat[3];\n        }\n        return dest;\n    }\n\n    var halfTheta = Math.acos(cosHalfTheta);\n    var sinHalfTheta = Math.sqrt(1.0 - cosHalfTheta*cosHalfTheta);\n\n    if (Math.abs(sinHalfTheta) < 0.001){\n        dest[0] = (quat[0]*0.5 + quat2[0]*0.5);\n        dest[1] = (quat[1]*0.5 + quat2[1]*0.5);\n        dest[2] = (quat[2]*0.5 + quat2[2]*0.5);\n        dest[3] = (quat[3]*0.5 + quat2[3]*0.5);\n        return dest;\n    }\n\n    var ratioA = Math.sin((1 - slerp)*halfTheta) / sinHalfTheta;\n    var ratioB = Math.sin(slerp*halfTheta) / sinHalfTheta;\n\n    dest[0] = (quat[0]*ratioA + quat2[0]*ratioB);\n    dest[1] = (quat[1]*ratioA + quat2[1]*ratioB);\n    dest[2] = (quat[2]*ratioA + quat2[2]*ratioB);\n    dest[3] = (quat[3]*ratioA + quat2[3]*ratioB);\n\n    return dest;\n}\n\n\n/*\n * quat4.str\n * Returns a string representation of a quaternion\n *\n * Params:\n * quat - quat4 to represent as a string\n *\n * Returns:\n * string representation of quat\n */\nquat4.str = function(quat) {\n    return '[' + quat[0] + ', ' + quat[1] + ', ' + quat[2] + ', ' + quat[3] + ']';\n}"]}